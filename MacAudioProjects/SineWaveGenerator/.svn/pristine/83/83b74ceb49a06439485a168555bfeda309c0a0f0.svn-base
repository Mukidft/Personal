//
//  Generator.cpp
//  SineWaveGenerator
//
//  Created by Lipstick on 9/19/16.
//  Copyright Â© 2016 Lipstick. All rights reserved.
//

#include "Generator.hpp"
#include <iostream>
#include "math.h"

Generator::Generator(unsigned SampleRate) : mSampleRate(SampleRate), mFrequency(440), isPlaying(false), mBPM(120), mDuration(0.5f)
{

}

Generator::~Generator()
{

}

void Generator::start(void) {
    epoch = std::chrono::high_resolution_clock::now();
}

template <typename duration_type>
const duration_type Generator::time_elapsed(void)
{
    return std::chrono::duration_cast<duration_type>(std::chrono::high_resolution_clock::now() - epoch);
}

unsigned Generator::GetSampleRate()
{
    return mSampleRate;
}

void Generator::SetSampleRate(unsigned rate)
{
    mSampleRate = rate;
}

void Generator::Generate(float* &left, float* &right, float sample, float indexSize)
{
    mSeconds = sample / mSampleRate;
    std::chrono::milliseconds elapsed = time_elapsed<std::chrono::milliseconds>();
    
    if(timerStarted)
    {
        start();
        timerStarted = false;
    }
    
    if(isPlaying)
    {
        if(float(elapsed.count()) / 1000.0f <= mDuration)
            for(unsigned i = 0; i < indexSize; i++)
            {
                float tone = sin(2 * M_PI * (mFrequency * (sample + i)/mSampleRate));
                left[i] = tone;
                right[i] = tone;
            }
        else
        {
            for(unsigned i = 0; i < indexSize; i++)
            {
                left[i] = 0.0f;
                right[i] = 0.0f;
            }
            
            if(float(elapsed.count()) / 1000.0f <= (2 * mDuration))
                start();
        }
    }
    else
    {
        for(unsigned i = 0; i < indexSize; i++)
        {
            left[i] = 0.0f;
            right[i] = 0.0f;
        }
    }
}

void Generator::SetFrequency(float frequency)
{
    mFrequency = frequency;
}

void Generator::SetBPM(unsigned bpm)
{
    mBPM = bpm;
    mDuration = 1.0f / (float(mBPM) / 60.0f);
    
    std::cout << mBPM << std::endl;
    
}

void Generator::SetPlaying(bool state)
{
    isPlaying = state;
    start();
    
    if(isPlaying == true)
        timerStarted = true;
}