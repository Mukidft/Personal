/*
 *	File:		SpectralEQ.h
 *
 *	Version:	1.0
 *
 *	Created:	1/31/17
 *
 *	Copyright:  Copyright 2017 DeepakChennakkadan. All rights reserved.
 *
 *  Details:    This project was generated by Apple's AU Effect template as updated by Alex Kenis 8/30/15
 *
 *	Disclaimer:	IMPORTANT:  This Apple software is supplied to you by Apple Computer, Inc. ("Apple") in
 *				consideration of your agreement to the following terms, and your use, installation, modification
 *				or redistribution of this Apple software constitutes acceptance of these terms.  If you do
 *				not agree with these terms, please do not use, install, modify or redistribute this Apple
 *				software.
 *
 *				In consideration of your agreement to abide by the following terms, and subject to these terms,
 *				Apple grants you a personal, non-exclusive license, under Apple's Copyrights in this
 *				original Apple software (the "Apple Software"), to use, reproduce, modify and redistribute the
 *				Apple Software, with or without modifications, in source and/or binary forms; provided that if you
 *				redistribute the Apple Software in its entirety and without modifications, you must retain this
 *				notice and the following text and disclaimers in all such redistributions of the Apple Software.
 *				Neither the name, trademarks, service marks or logos of Apple Computer, Inc. may be used to
 *				endorse or promote products derived from the Apple Software without specific prior written
 *				permission from Apple.  Except as expressly stated in this notice, no other rights or
 *				licenses, express or implied, are granted by Apple herein, including but not limited to any
 *				patent rights that may be infringed by your derivative works or by other works in which the
 *				Apple Software may be incorporated.
 *
 *				The Apple Software is provided by Apple on an "AS IS" basis.  APPLE MAKES NO WARRANTIES, EXPRESS OR
 *				IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY
 *				AND FITNESS FOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE
 *				OR IN COMBINATION WITH YOUR PRODUCTS.
 *
 *				IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR CONSEQUENTIAL
 *				DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 *				OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) ARISING IN ANY WAY OUT OF THE USE,
 *				REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER
 *				UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN
 *				IF APPLE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 *
 */

#include "AUEffectBase.h"
#include "SpectralEQVersion.h"
#include "DSP_FFT.h"
#include "SpectralEQDefinitions.h"

// Core Audio
#import <CoreAudio/CoreAudio.h>
#import <AudioToolbox/AudioToolbox.h>

// Audio Units
#import <AudioUnit/AudioUnitParameters.h>
#import <AudioUnit/AudioUnitProperties.h>


#ifndef __SpectralEQ_h__
#define __SpectralEQ_h__


#pragma mark ____SpectralEQ Parameters

#define EQBANDS 6

// parameters
static const float kDefaultValue_ParamOne = 0.5;
static CFStringRef kParameterOneName = CFSTR("Parameter One");

// EQ 1
static const float kDefaultValue_Param_EQ1_F = 3333;
static const float kDefaultValue_Param_EQ1_Q = 1.0;
static const float kDefaultValue_Param_EQ1_G = 0;
static CFStringRef kParameter_EQ1_F_Name = CFSTR("Param_EQ1_F");
static CFStringRef kParameter_EQ1_Q_Name = CFSTR("Param_EQ1_Q");
static CFStringRef kParameter_EQ1_G_Name = CFSTR("Param_EQ1_G");


static const float kDefaultValue_Param_EQ1_BYPASS = 1;
static CFStringRef kParameter_EQ1_BYPASS_Name = CFSTR("Param_EQ1_BYPASS");

// EQ 2
static const float kDefaultValue_Param_EQ2_F = 6666;
static const float kDefaultValue_Param_EQ2_Q = 1.0;
static const float kDefaultValue_Param_EQ2_G = 0;
static CFStringRef kParameter_EQ2_F_Name = CFSTR("Param_EQ2_F");
static CFStringRef kParameter_EQ2_Q_Name = CFSTR("Param_EQ2_Q");
static CFStringRef kParameter_EQ2_G_Name = CFSTR("Param_EQ2_G");

static const float kDefaultValue_Param_EQ2_BYPASS = 1;
static CFStringRef kParameter_EQ2_BYPASS_Name = CFSTR("Param_EQ2_BYPASS");

// EQ 3
static const float kDefaultValue_Param_EQ3_F = 10000;
static const float kDefaultValue_Param_EQ3_Q = 1.0;
static const float kDefaultValue_Param_EQ3_G = 0;
static CFStringRef kParameter_EQ3_F_Name = CFSTR("Param_EQ3_F");
static CFStringRef kParameter_EQ3_Q_Name = CFSTR("Param_EQ3_Q");
static CFStringRef kParameter_EQ3_G_Name = CFSTR("Param_EQ3_G");

static const float kDefaultValue_Param_EQ3_BYPASS = 1;
static CFStringRef kParameter_EQ3_BYPASS_Name = CFSTR("Param_EQ3_BYPASS");

// EQ 4
static const float kDefaultValue_Param_EQ4_F = 13333;
static const float kDefaultValue_Param_EQ4_Q = 1.0;
static const float kDefaultValue_Param_EQ4_G = 0;
static CFStringRef kParameter_EQ4_F_Name = CFSTR("Param_EQ4_F");
static CFStringRef kParameter_EQ4_Q_Name = CFSTR("Param_EQ4_Q");
static CFStringRef kParameter_EQ4_G_Name = CFSTR("Param_EQ4_G");

static const float kDefaultValue_Param_EQ4_BYPASS = 1;
static CFStringRef kParameter_EQ4_BYPASS_Name = CFSTR("Param_EQ4_BYPASS");

// EQ 5
static const float kDefaultValue_Param_EQ5_F = 16666;
static const float kDefaultValue_Param_EQ5_Q = 1.0;
static const float kDefaultValue_Param_EQ5_G = 0;
static CFStringRef kParameter_EQ5_F_Name = CFSTR("Param_EQ5_F");
static CFStringRef kParameter_EQ5_Q_Name = CFSTR("Param_EQ5_Q");
static CFStringRef kParameter_EQ5_G_Name = CFSTR("Param_EQ5_G");

static const float kDefaultValue_Param_EQ5_BYPASS = 1;
static CFStringRef kParameter_EQ5_BYPASS_Name = CFSTR("Param_EQ5_BYPASS");

// EQ 6
static const float kDefaultValue_Param_EQ6_F = 20000;
static const float kDefaultValue_Param_EQ6_Q = 1.0;
static const float kDefaultValue_Param_EQ6_G = 0;
static CFStringRef kParameter_EQ6_F_Name = CFSTR("Param_EQ6_F");
static CFStringRef kParameter_EQ6_Q_Name = CFSTR("Param_EQ6_Q");
static CFStringRef kParameter_EQ6_G_Name = CFSTR("Param_EQ6_G");

static const float kDefaultValue_Param_EQ6_BYPASS = 1;
static CFStringRef kParameter_EQ6_BYPASS_Name = CFSTR("Param_EQ6_BYPASS");

enum {
    kParam_One =0,
    kParam_EQ1_F =1,
    kParam_EQ1_Q =2,
    kParam_EQ1_G =3,
    kParam_EQ2_F =4,
    kParam_EQ2_Q =5,
    kParam_EQ2_G =6,
    kParam_EQ3_F =7,
    kParam_EQ3_Q =8,
    kParam_EQ3_G =9,
    kParam_EQ4_F =10,
    kParam_EQ4_Q =11,
    kParam_EQ4_G =12,
    kParam_EQ5_F =13,
    kParam_EQ5_Q =14,
    kParam_EQ5_G =15,
    kParam_EQ6_F =16,
    kParam_EQ6_Q =17,
    kParam_EQ6_G =18,
    kParam_EQ1_BYPASS = 19,
    kParam_EQ2_BYPASS = 20,
    kParam_EQ3_BYPASS = 21,
    kParam_EQ4_BYPASS = 22,
    kParam_EQ5_BYPASS = 23,
    kParam_EQ6_BYPASS = 24,
    kNumberOfParameters=25
};

#pragma mark ____SpectralEQ
class SpectralEQ : public AUEffectBase
{
private:
    
    // Error Checking
    enum ErrorType
    {
        NewGraph,
        GraphOpen,
        GraphInitialize,
        GraphStart,
        NodeAdded,
        NodeConnected,
        NodeInfo,
        NodeParameter,
        NodeSetProperty,
        NodeGetProperty
    } _ErrorType;
    
    // AUGraph
    AUGraph mGraph;
    AUNode outputNode;
    AUNode eq_node[EQBANDS];
    AudioComponentDescription mCompDesc;
    AudioStreamBasicDescription mStreamDesc;
    OSStatus mResult;
    AudioTimeStamp timeStamp;
    
    void initializeGraph();
    void ErrorCheck(ErrorType error);
    void setStreamDescription(AudioUnit au);
public:    
    
    AudioUnit output;
    AudioUnit eq_au[EQBANDS];
    const Float32 *mSource;
    
    // FFT
    DSP_FFT mDSP_FFT;
    SpectrumGraphInfo mInfos;
    CAAutoFree<Float32> mComputedMagnitudes;
    
    void SetEQParams(int index, AudioUnitParameterValue F, AudioUnitParameterValue Q, AudioUnitParameterValue G);
    void SetBypass(int index, int state);
    
    virtual OSStatus Initialize();
    
    SpectralEQ(AudioUnit component);
    
    virtual AUKernelBase *		NewKernel() { return new SpectralEQKernel(this); }
    
    virtual	OSStatus			GetParameterValueStrings(AudioUnitScope			inScope,
                                                         AudioUnitParameterID		inParameterID,
                                                         CFArrayRef *			outStrings);
    
    virtual	OSStatus			GetParameterInfo(AudioUnitScope			inScope,
                                                 AudioUnitParameterID	inParameterID,
                                                 AudioUnitParameterInfo	&outParameterInfo);

    virtual OSStatus            Render(AudioUnitRenderActionFlags & ioActionFlags,
                                       const AudioTimeStamp & inTimeStamp,
                                       UInt32 inFramesToProcess );

     // START COCOA UI::
    virtual OSStatus			GetPropertyInfo(AudioUnitPropertyID		inID,
                                                AudioUnitScope			inScope,
                                                AudioUnitElement		inElement,
                                                UInt32 &			outDataSize,
                                                Boolean	&			outWritable );
    
    virtual OSStatus			GetProperty(AudioUnitPropertyID inID,
                                            AudioUnitScope 		inScope,
                                            AudioUnitElement 		inElement,
                                            void *			outData);
    // END COCOA UI
    
    virtual	bool				SupportsTail () { return true; }
    virtual Float64				GetTailTime() {return 0.001;}
    virtual Float64				GetLatency() {return 0.0;}
    
    /*! @method Version */
    virtual OSStatus		Version() { return kSpectralEQVersion; }
    
    
    
protected:
    class SpectralEQKernel : public AUKernelBase		// most real work happens here
    {
    public:
        SpectralEQKernel(AUEffectBase *inAudioUnit )
        : AUKernelBase(inAudioUnit)
        {
        }
        
        // *Required* overides for the process method for this effect
        // processes one channel of interleaved samples
        virtual void 		Process(	const Float32 	*inSourceP,
                                    Float32		 	*inDestP,
                                    UInt32 			inFramesToProcess,
                                    UInt32			inNumChannels,
                                    bool			&ioSilence);
        
        virtual void		Reset();
        
        //private: //state variables...
    };
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#endif